import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv('D:test.csv')
print(data.head(10))
print(data.info())

train_input = np.array(data.x[0:200]).reshape(200, 1)
train_output = np.array(data.y[0:200]).reshape(200, 1)
test_input = np.array(data.x[200:299]).reshape(99, 1)
test_output = np.array(data.y[200:299]).reshape(99, 1)

# Forward Propagation
def forward_propagation(train_input, parameters):
    m = parameters['m']
    c = parameters['c']
    predictions = np.multiply(m, train_input) + c
    return predictions

# Cost Function
def cost_function(predictions, train_output):
    cost = np.mean((predictions - train_output) ** 2) * 0.5
    return cost

# Back Propagation
def back_propagation(train_input, train_output, predictions):
    derivatives = dict()
    df = predictions - train_output
    dm = np.mean(np.multiply(df, train_input))
    dc = np.mean(df)
    derivatives['dm'] = dm
    derivatives['dc'] = dc
    return derivatives

# Updating the Parameters
def update_parameters(parameters, derivatives, learning_rate):
    parameters['m'] = parameters['m'] - learning_rate * derivatives['dm']
    parameters['c'] = parameters['c'] - learning_rate * derivatives['dc']
    return parameters

def train(train_input, train_output, learning_rate, iters):
    parameters = dict()
    parameters['m'] = np.random.uniform(0, 1) * -1
    parameters['c'] = np.random.uniform(0, 1) * -1
    loss = list()
    
    plt.figure()
    
    for i in range(iters):
        print('iteration:',i)
        predictions = forward_propagation(train_input, parameters)
        cost = cost_function(predictions, train_output)
        loss.append(cost)
        print('loss:',cost)
        
        # Plotting
        plt.clf()
        plt.plot(train_input, train_output, '+', label='Original')
        plt.plot(train_input, predictions, '*', label='Predictions')
        plt.legend()
        plt.pause(0.1)  # Pause to update the plot
        
        derivatives = back_propagation(train_input, train_output, predictions)
        parameters = update_parameters(parameters, derivatives, learning_rate)
    
    plt.show()
    
    return parameters, loss

parameters, loss = train(train_input, train_output, 0.0001, 20)

print("Trained Parameters:", parameters)
print("Loss over iterations:", loss)
